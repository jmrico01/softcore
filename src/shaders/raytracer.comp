#version 450

#define TILE_SIZE 16
#define MAX_MATERIALS 16
#define MAX_MESHES 128

#define SAMPLES_DIFFUSE 1
#define SAMPLES_SPECULAR 1
#define BOUNCES_DIFFUSE 1
#define BOUNCES_SPECULAR 1

#define PI_F 3.14159265

#define FLOAT_BIG_POSITIVE 1e6
#define EPSILON 0.000001
#define MIN_DIST 0.0001
#define MAX_DIST 20.0

#define QUAT_ONE vec4(0.0, 0.0, 0.0, 1.0)

struct Material
{
	vec3 albedo;
	float smoothness;
	vec3 emissionColor;
	float emission;
};

struct Triangle
{
	vec3 a, b, c;
	vec3 normal;
	uint materialIndex;
};

struct Bvh
{
	vec3 aabbMin;
	uint startTriangle;
	vec3 aabbMax;
	uint endTriangle;
	uint skip;
};

struct Mesh
{
	vec4 inverseQuat;
	vec3 offset;
	uint startBvh;
	uint endBvh;
};

layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

layout(binding = 0, rgba8) uniform writeonly image2D resultImage;
layout(binding = 1) uniform UBO
{
	vec3 cameraPos;
	uint seed;
	vec3 filmTopLeft;
	uint numMeshes;
	vec3 filmUnitOffsetX;
	vec3 filmUnitOffsetY;
	Material materials[MAX_MATERIALS];
	Mesh meshes[MAX_MESHES];
} ubo;
layout(std140, binding = 2) readonly buffer Triangles
{
	Triangle triangles[];
};
layout(std140, binding = 3) readonly buffer Bvhs
{
	Bvh bvhs[];
};

const uint UINT32_MAX_VALUE = 0xffffffff;

// Reference http://www.burtleburtle.net/bob/hash/integer.html
uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

// Reference https://en.wikipedia.org/wiki/Xorshift
uint XOrShift32(uint value)
{
	value ^= value << 13;
	value ^= value >> 17;
	value ^= value << 5;
	return value;
}

uint RandomUInt(inout uint state)
{
	state = XOrShift32(state);
	return state;
}

float RandomUnilateral(inout uint state)
{
	return float(RandomUInt(state)) / float(UINT32_MAX_VALUE);
}

float RandomBilateral(inout uint state)
{
	return 2.0 * RandomUnilateral(state) - 1.0;
}

vec3 RandomInsideUnitSphere(inout uint state)
{
	// TODO is this the best way, for a shader? maybe...
	while (true) {
		const vec3 p = vec3(RandomBilateral(state), RandomBilateral(state), RandomBilateral(state));
		if (dot(p, p) <= 1.0) {
			return p;
		}
	}
}

vec3 RandomInUnitSphereSurface(inout uint state)
{
	const float angle = RandomUnilateral(state) * 2.0 * PI_F;
	const float z = RandomBilateral(state);
	const float r = sqrt(1.0 - z * z);
	return vec3(r * cos(angle), r * sin(angle), z);
}

float pow3(float x)
{
	return x * x * x;
}

float pow4(float x)
{
	return x * x * x * x;
}

vec3 Reciprocal(vec3 v)
{
	return vec3(1.0 / v.x, 1.0 / v.y, 1.0 / v.z);
}

vec4 QuatMultiply(vec4 q1, vec4 q2)
{
    vec4 result;
    result.x = q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y;
    result.y = q1.w*q2.y + q1.y*q2.w + q1.z*q2.x - q1.x*q2.z;
    result.z = q1.w*q2.z + q1.z*q2.w + q1.x*q2.y - q1.y*q2.x;
    result.w = q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z;
    return result;
}

vec4 QuatInverse(vec4 q)
{
	return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 QuatRotate(vec3 v, vec4 quat)
{
	// TODO Quat multiply with baked w=0
	const vec4 vQuat = vec4(v, 0.0);

	const vec4 qv = QuatMultiply(quat, vQuat);
	const vec4 qInv = QuatInverse(quat);
	const vec4 qvqInv = QuatMultiply(qv, qInv);

	return vec3(qvqInv.x, qvqInv.y, qvqInv.z);
}

vec4 QuatFromAngleUnitAxis(float angle, vec3 axis)
{
	const float cosHalfAngle = cos(angle / 2.0);
	const float sinHalfAngle = sin(angle / 2.0);

	return vec4(axis.x * sinHalfAngle, axis.y * sinHalfAngle, axis.z * sinHalfAngle, cosHalfAngle);
}

// Returns a quaternion for the rotation required to align unit X vector with unit vector reference
vec4 QuatRotationFromUnitX(vec3 reference)
{
	const float dotUnitX = dot(vec3(1.0, 0.0, 0.0), reference);
	if (dotUnitX > (1.0 - EPSILON)) {
		return QUAT_ONE;
	}
	else if (dotUnitX < (-1.0 + EPSILON)) {
		// 180-degree rotation about y axis (perpendicular to x)
		// comptime angle = PI, cosHalfAngle = 0, sinHalfAngle = 1, axis = 0.0, 1.0, 0.0
		return vec4(0.0, 1.0, 0.0, 0.0);
	}

	const vec4 q = vec4(cross(vec3(1.0, 0.0, 0.0), reference), 1.0 + dotUnitX);
	return normalize(q);
}

vec3 GetNewRayDirDiffuse(vec3 hitNormal, inout uint randomState)
{
	// return normalize(hitNormal + RandomInsideUnitSphere(randomState));
	return normalize(hitNormal + RandomInUnitSphereSurface(randomState));
}

vec3 GetNewRayDirSpecular(vec3 rayDir, vec3 hitNormal, float smoothness, inout uint randomState)
{
	// Gamma is a random variable between 0 and pi/2, that is picked from a distribution which is
	// lerp between uniform and gaussian w/ fancy params, based on parameter smoothness
	const float oneMinusS = 1.0 - smoothness;
	const float c = 1.0 / (pow3(oneMinusS)) - 1.0;
	const float x = RandomUnilateral(randomState);
	const float gamma = mix(1.0 - x, exp(-c * x * x), smoothness) * PI_F / 2.0f;
	const float phi = RandomUnilateral(randomState) * 2.0 * PI_F;
	const vec3 pureBounce = reflect(rayDir, hitNormal);

	vec4 quat = QuatFromAngleUnitAxis(gamma, vec3(0.0, 0.0, 1.0));
	quat = QuatMultiply(QuatFromAngleUnitAxis(phi, vec3(1.0, 0.0, 0.0)), quat);
	quat = QuatMultiply(QuatRotationFromUnitX(pureBounce), quat);

	return QuatRotate(vec3(1.0, 0.0, 0.0), quat);
}

// NOTE remember this takes in the INVERSE ray direction!
bool RayAABBIntersection(vec3 rayOrigin, vec3 rayDirInv, vec3 aabbMin, vec3 aabbMax, out float tMin, out float tMax)
{
    tMin = -FLOAT_BIG_POSITIVE;
    tMax = FLOAT_BIG_POSITIVE;

    const float tX1 = (aabbMin.x - rayOrigin.x) * rayDirInv.x;
    const float tX2 = (aabbMax.x - rayOrigin.x) * rayDirInv.x;
    tMin = max(tMin, min(tX1, tX2));
    tMax = min(tMax, max(tX1, tX2));

    const float tY1 = (aabbMin.y - rayOrigin.y) * rayDirInv.y;
    const float tY2 = (aabbMax.y - rayOrigin.y) * rayDirInv.y;
    tMin = max(tMin, min(tY1, tY2));
    tMax = min(tMax, max(tY1, tY2));

    const float tZ1 = (aabbMin.z - rayOrigin.z) * rayDirInv.z;
    const float tZ2 = (aabbMax.z - rayOrigin.z) * rayDirInv.z;
    tMin = max(tMin, min(tZ1, tZ2));
    tMax = min(tMax, max(tZ1, tZ2));

    return tMax >= tMin;
}

bool RayTriangleIntersection(vec3 rayOrigin, vec3 rayDir, vec3 a, vec3 b, vec3 c, out float t)
{
	const vec3 ab = b - a;
	const vec3 ac = c - a;
	const vec3 h = cross(rayDir, ac);
	const float x = dot(ab, h);
	if (x > -EPSILON && x < EPSILON) {
		return false;
	}

	const float f = 1.0 / x;
	const vec3 s = rayOrigin - a;
	const float u = f * dot(s, h);
	if (u < 0.0 || u > 1.0) {
		return false;
	}

	const vec3 q = cross(s, ab);
	const float v = f * dot(rayDir, q);
	if (v < 0.0f || u + v > 1.0) {
		return false;
	}

	t = f * dot(ac, q);
	return true;
}

// TODO review inout hitMaterialIndex and other in/out params
void TraverseMeshes(vec3 rayOrigin, vec3 rayDir, inout uint hitMaterialIndex, out vec3 hitNormal, inout float hitDist)
{
	for (uint m = 0; m < ubo.numMeshes; m++) {
		const Mesh mesh = ubo.meshes[m];
		const vec3 meshRayOrigin = QuatRotate(rayOrigin + mesh.offset, mesh.inverseQuat);
		const vec3 meshRayDir = QuatRotate(rayDir, mesh.inverseQuat);
		const vec3 meshInverseRayDir = Reciprocal(meshRayDir);

		uint i = mesh.startBvh;
		while (i < mesh.endBvh) {
			const Bvh bvh = bvhs[i];

			float tMin, tMax;
			const bool aabbHit = RayAABBIntersection(meshRayOrigin, meshInverseRayDir, bvh.aabbMin, bvh.aabbMax,
													 tMin, tMax);
			if (aabbHit && !(tMin < 0.0 && tMax < 0.0) && tMin < hitDist) {
				const uint tStart = bvh.startTriangle;
				const uint tEnd = bvh.endTriangle;
				for (uint j = tStart; j < tEnd; j++) {
					const vec3 normal = triangles[j].normal;
					const float dotRayNormal = dot(meshRayDir, normal);
					if (dotRayNormal <= 0.0) {
						float t;
						const bool triangleHit = RayTriangleIntersection(meshRayOrigin, meshRayDir,
																		 triangles[j].a, triangles[j].b, triangles[j].c,
																		 t);
						if (triangleHit && t > MIN_DIST && t < hitDist) {
							hitMaterialIndex = triangles[j].materialIndex;
							hitNormal = normal;
							hitDist = t;
						}
					}
				}

				i++;
			}
			else {
				i += bvh.skip;
			}
		}
	}
}

vec3 RaycastColor(vec3 rayOrigin, vec3 rayDir, uint randomState)
{
	const float weightDiffuse = 0.5;
	const float weightSpecular = 1.0 - weightDiffuse;
	const float smoothnessDiffuse = 0.2;

	uint hitMaterialIndex = MAX_MATERIALS;
	vec3 hitNormal;
	float hitDist = MAX_DIST;
	TraverseMeshes(rayOrigin, rayDir, hitMaterialIndex, hitNormal, hitDist);

	Material hitMaterial;
	if (hitMaterialIndex == MAX_MATERIALS) {
		return vec3(0.0, 0.0, 0.0);
	}
	else {
		hitMaterial = ubo.materials[hitMaterialIndex];
		if (hitMaterial.emission > 0.0) {
			return hitMaterial.emission * hitMaterial.emissionColor;
		}
	}

	rayOrigin += rayDir * hitDist;
	vec3 albedoMultDiffuse = hitMaterial.albedo;
	vec3 albedoMultSpecular = hitMaterial.albedo;
	const float sampleWeightDiffuse = 1.0 / SAMPLES_DIFFUSE * weightDiffuse;
	const float sampleWeightSpecular = 1.0 / SAMPLES_SPECULAR * weightSpecular;
	const vec3 sampleRayDirDiffuse = GetNewRayDirDiffuse(hitNormal, randomState);
	const vec3 sampleRayDirSpecular = GetNewRayDirSpecular(rayDir, hitNormal, hitMaterial.smoothness, randomState);

	vec3 color = vec3(0.0, 0.0, 0.0);

	// Diffuse
	for (uint s = 0; s < SAMPLES_DIFFUSE; s++) {
		vec3 sampleRayOrigin = rayOrigin;
		vec3 sampleRayDir = sampleRayDirDiffuse;

		for (uint i = 0; i < BOUNCES_DIFFUSE; i++) {
			hitMaterialIndex = MAX_MATERIALS;
			hitDist = MAX_DIST;
			TraverseMeshes(sampleRayOrigin, sampleRayDir, hitMaterialIndex, hitNormal, hitDist);

			if (hitMaterialIndex == MAX_MATERIALS) {
				break;
			}
			else {
				Material hitMaterial = ubo.materials[hitMaterialIndex];
				if (hitMaterial.emission > 0.0) {
					color += hitMaterial.emission * hitMaterial.emissionColor * albedoMultDiffuse * sampleWeightDiffuse;
					break;
				}
				else if (i != BOUNCES_DIFFUSE - 1) {
					albedoMultDiffuse *= hitMaterial.albedo;
					sampleRayOrigin += sampleRayDir * hitDist;
					sampleRayDir = GetNewRayDirDiffuse(hitNormal, randomState);
				}
			}
		}
	}

	// Specular
	for (uint s = 0; s < SAMPLES_SPECULAR; s++) {
		vec3 sampleRayOrigin = rayOrigin;
		vec3 sampleRayDir = sampleRayDirSpecular;

		for (uint i = 0; i < BOUNCES_SPECULAR; i++) {
			hitMaterialIndex = MAX_MATERIALS;
			hitDist = MAX_DIST;
			TraverseMeshes(sampleRayOrigin, sampleRayDir, hitMaterialIndex, hitNormal, hitDist);

			if (hitMaterialIndex == MAX_MATERIALS) {
				break;
			}
			else {
				Material hitMaterial = ubo.materials[hitMaterialIndex];
				if (hitMaterial.emission > 0.0) {
					color += hitMaterial.emission * hitMaterial.emissionColor * albedoMultSpecular * sampleWeightSpecular;
					break;
				}
				else if (i != BOUNCES_SPECULAR - 1) {
					albedoMultSpecular *= hitMaterial.albedo;
					sampleRayOrigin += sampleRayDir * hitDist;
					sampleRayDir = GetNewRayDirSpecular(rayDir, hitNormal, hitMaterial.smoothness, randomState);
				}
			}
		}
	}

	return color;
}

void main()
{
	const uvec2 pixel = gl_GlobalInvocationID.xy;
	const vec3 filmOffsetX = ubo.filmUnitOffsetX * pixel.x;
	const vec3 filmOffsetY = ubo.filmUnitOffsetY * pixel.y;
	const vec3 filmPos = ubo.filmTopLeft + filmOffsetX + filmOffsetY;
	const vec3 rayDir = normalize(filmPos - ubo.cameraPos);

	const uint pixelIndex = pixel.y * imageSize(resultImage).x + pixel.x;
	uint seed = WangHash(pixelIndex);
	seed += ubo.seed;
	const vec3 raycastColor = RaycastColor(ubo.cameraPos, rayDir, seed);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(raycastColor, 1.0));
}
